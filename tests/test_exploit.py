class MemberStub:
    def __init__(self, p):
        self._p = p

def test_empty():
    from pybt.policy.exploit import Truncation

    x = Truncation()
    m = [MemberStub(p) for p in range(10)]

    # If there are no other members, just use this one
    assert x(m[1], []) == m[1]

    # If there is 1 other member, use one with min score
    assert x(m[0], [MemberStub(0)]) == m[0]
    assert x(m[0], [m[1]])._p == m[1]._p # Copy of object
    assert x(m[1], [m[0]]) == m[1]

    # If there are 2 or more, use upper and lower bounds
    assert x(m[0], [m[p] for p in range(3)])._p in [y._p for y in m[2:]]
    assert x(m[1], [m[p] for p in range(3)]) == m[1]
    assert x(m[2], [m[p] for p in range(3)]) == m[2]

    assert x(m[0], [m[p] for p in range(4)])._p in [y._p for y in m[3:]]
    assert x(m[1], [m[p] for p in range(4)]) == m[1]
    assert x(m[2], [m[p] for p in range(4)]) == m[2]
    assert x(m[3], [m[p] for p in range(4)]) == m[3]

    assert x(m[0], [m[p] for p in range(6)])._p in [y._p for y in m[4:]]
    assert x(m[1], [m[p] for p in range(6)])._p in [y._p for y in m[4:]]
    assert x(m[2], [m[p] for p in range(6)]) == m[2]
    assert x(m[3], [m[p] for p in range(6)]) == m[3]
    assert x(m[4], [m[p] for p in range(6)]) == m[4]
    assert x(m[5], [m[p] for p in range(6)]) == m[5]

